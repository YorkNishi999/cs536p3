/**********************************************************************
 Java CUP specification for a parser for b programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                INT;
terminal                BOOL;
terminal                VOID;
terminal TokenVal       TRUE;
terminal TokenVal       FALSE;
terminal                STRUCT;
terminal                RECEIVE;
terminal                PRINT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal                REPEAT;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;


/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal LinkedList       varDeclList;
non terminal VarDeclNode      varDecl;
non terminal FnDeclNode       fnDecl;
non terminal StructDeclNode   structDecl;
non terminal LinkedList       structBody;
non terminal FormalsListNode  formals;
non terminal LinkedList       formalsList;
non terminal FormalDeclNode   formalDecl;
non terminal FnBodyNode       fnBody;
non terminal LinkedList       stmtList;
non terminal StmtNode         stmt;
non terminal AssignNode       assignExp;
non terminal ExpNode          exp;
non terminal ExpNode          term;
non terminal CallExpNode      fncall;
non terminal LinkedList       actualList;
non terminal TypeNode         type;
non terminal ExpNode          loc;
non terminal IdNode           id;

/* NOTE: Add precedence and associativity declarations here */

precedence left ASSIGN;
precedence left OR;
precedence left AND;
/* comparison -> precedence is nonassoc */
precedence nonassoc LESS, LESSEQ, GREATER, GREATEREQ, EQUALS, NOTEQUALS;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left NOT, MINUS;

start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
                | fnDecl:f
                {:
                  RESULT = f;
                :}
                | structDecl:sd
                {:
                  RESULT = sd;
                :}// struct definitions only at top level
                ;

varDeclList     ::= varDeclList:vdl varDecl:vd
                {:
                  vdl.addLast(vd);
                  RESULT = vdl;
                :}
                | /* epsilon */
                {:
                  RESULT = new LinkedList<DeclNode>();
                :}
                ;

varDecl         ::= type:t id:i SEMICOLON
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
                | STRUCT id:i1 id:i2 SEMICOLON
                {:
                   RESULT = new VarDeclNode(new StructNode(i1), i2, 0);
                :}
                ;

fnDecl          ::= type:t id:i formals:f fnBody:fb
                {:
                  RESULT = new FnDeclNode(t, i, f, fb);
                :}
                ;

structDecl      ::= STRUCT id:i LCURLY structBody:d RCURLY
                {:
                  RESULT = new StructDeclNode(i, new DeclListNode(d));
                :}
                ;

structBody      ::= structBody:sb varDecl:vd
                {:
                  sb.addLast(vd);
                  RESULT = sb;
                :}
                | varDecl:vd
                {:
                  RESULT = new LinkedList<>();
                  RESULT.addLast(vd);
                :}
                ;

formals         ::= LPAREN RPAREN // no argment
                {:
                  RESULT = new FormalsListNode(new LinkedList<>());
                :}
                | LPAREN formalsList:fl RPAREN
                {:
                  RESULT = new FormalsListNode(fl);
                :}
                ;

formalsList     ::= formalDecl:fd
                {:
                  LinkedList<FormalDeclNode> ll = new LinkedList<>();
                  ll.addLast(fd);
                  RESULT = ll;
                :}
                | formalDecl:fb COMMA formalsList:fl 
                {:
                  fl.addLast(fb);
                  RESULT = fl;
                :}
                ;

formalDecl      ::= type:t id:i        // note: no struct parameters
                {:
                  RESULT = new FormalDeclNode(t, i);
                :}
                ;

fnBody          ::= LCURLY varDeclList:vd stmtList:sl RCURLY
                {:
                  RESULT = new FnBodyNode(new DeclListNode(vd), new StmtListNode(sl));
                :}
                ;

stmtList        ::= stmtList:sl stmt:s
                {:
                  sl.addLast(s);
                  RESULT = sl;
                :}
                | /* epsilon */
                {:
                  RESULT = new LinkedList<StmtNode>();
                :}
                ;

stmt            ::= assignExp:ae SEMICOLON
                {:
                  RESULT = new AssignStmtNode(ae);
                :}
                | fncall:f SEMICOLON
                {:
                  RESULT = new CallStmtNode(f);
                :}
                ;

assignExp       ::= loc:l ASSIGN exp:e
                {:
                  RESULT = new AssignNode(l, e);
                :}
                ;

exp             ::= assignExp:ae
                {:
                  RESULT = ae;
                :}
                | exp:e1 PLUS exp:e2
                {:
                  RESULT = new PlusNode(e1, e2);
                :}
                | exp:e1 MINUS exp:e2
                {:
                  RESULT = new MinusNode(e1, e2);
                :}
                | exp:e1 TIMES exp:e2
                {:
                  RESULT = new TimesNode(e1, e2);
                :}
                | exp:e1 DIVIDE exp:e2
                {:
                  RESULT = new DivideNode(e1, e2);
                :}
                | NOT exp:e
                {:
                  RESULT = new NotNode(e);
                :}
                | exp:e1 AND exp:e2
                {:
                  RESULT = new AndNode(e1, e2);
                :}
                | exp:e1 OR exp:e2
                {:
                  RESULT = new OrNode(e1, e2);
                :}
                | exp:e1 EQUALS exp:e2
                {:
                  RESULT = new EqualsNode(e1, e2);
                :}
                | exp:e1 NOTEQUALS exp:e2
                {:
                  RESULT = new NotEqualsNode(e1, e2);
                :}
                | exp:e1 LESS exp:e2
                {:
                  RESULT = new LessNode(e1, e2);
                :}
                | exp:e1 GREATER exp:e2
                {:
                  RESULT = new GreaterNode(e1, e2);
                :}
                | exp:e1 LESSEQ exp:e2
                {:
                  RESULT = new LessEqNode(e1, e2);
                :}
                | exp:e1 GREATEREQ exp:e2
                {:
                  RESULT = new GreaterEqNode(e1, e2);
                :}
                | MINUS term:t
                {:
                  RESULT = new UnaryMinusNode(t);
                :}
                | term:t
                {:
                  RESULT = t;
                :}
                ;

term            ::= loc:l
                {:
                  RESULT = l;
                :}
                | TRUE:i
                {:
                  RESULT = new TrueNode(i.linenum, i.charnum);
                :}
                | FALSE:i
                {:
                  RESULT = new FalseNode(i.linenum, i.charnum);
                :}
                | fncall:f
                {:
                  RESULT = f;
                :}
                ;

fncall          ::= id:i LPAREN RPAREN   // fn call with no args
                {:
                  RESULT = new CallExpNode(i);
                :}
                | id:i LPAREN actualList:al RPAREN  // with args
                {:
                  RESULT = new CallExpNode(i, new ExpListNode(al));
                :}
                ;

actualList      ::= exp:e
                {:
                  LinkedList<ExpNode> l = new LinkedList<>();
                  l.addLast(e);
                  RESULT = l;
                :}
                | actualList:al COMMA exp:e
                {:
                  al.addLast(e);
                  RESULT = al;
                :}
                ;

type            ::= INT
                {:
                  RESULT = new IntNode();
                :}
                |   BOOL
                {:
                  RESULT = new BoolNode();
                :}
                |   VOID
                {:
                  RESULT = new VoidNode();
                :}
                ;

loc             ::= id:i
                {:
                  RESULT = i;
                :}
                | loc:l DOT id:i
                {:
                  RESULT = new DotAccessExpNode(l, i);
                :}
                ;

id              ::= ID:i
                {: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :}
                ;
